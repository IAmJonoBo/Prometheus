name: Automated Dependency Sync
# Automated dependency synchronization with self-update capabilities

on:
  schedule:
    # Run daily at 5:00 UTC (after dependency-orchestration)
    - cron: "0 5 * * *"
  workflow_dispatch:
    inputs:
      dry-run:
        description: Dry run mode (no actual changes)
        type: boolean
        default: false
      no-rollback:
        description: Disable rollback on failure
        type: boolean
        default: false
      sync-prod:
        description: Sync production environment
        type: boolean
        default: false
      no-auto-apply:
        description: Disable automatic application of safe updates
        type: boolean
        default: false

permissions:
  contents: write  # Required for creating commits if changes are applied
  pull-requests: write  # Required for creating PRs with updates
  issues: write

env:
  POETRY_NO_INTERACTION: "1"
  PYTHONIOENCODING: utf-8

jobs:
  auto-sync:
    name: Automated dependency synchronization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python and Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: "3.12"
          poetry-version: "1.8.3"
          install-poetry-export: "true"

      - name: Install CLI runtime dependencies
        run: |
          # Install minimal deps needed for CLI operations
          pip install packaging typer opentelemetry-api prometheus-client

      - name: Configure git for commits
        run: |
          git config --global user.name "prometheus-auto-sync[bot]"
          git config --global user.email "prometheus-auto-sync[bot]@users.noreply.github.com"

      - name: Export auto-sync configuration
        run: |
          {
            echo "DRY_RUN=${{ github.event.inputs.dry-run || 'false' }}"
            echo "NO_ROLLBACK=${{ github.event.inputs.no-rollback || 'false' }}"
            echo "SYNC_PROD=${{ github.event.inputs.sync-prod || 'false' }}"
            echo "NO_AUTO_APPLY=${{ github.event.inputs.no-auto-apply || 'false' }}"
            echo "TEMPORAL_SNAPSHOT_HOST=${{ secrets.TEMPORAL_SNAPSHOT_HOST || '' }}"
            echo "DEPENDENCY_GUARD_SLACK_WEBHOOK=${{ secrets.DEPENDENCY_GUARD_SLACK_WEBHOOK || '' }}"
            echo "HAS_TEMPORAL_CREDS=${{ secrets.TEMPORAL_SNAPSHOT_HOST != '' && 'true' || 'false' }}"
            echo "HAS_SLACK_WEBHOOK=${{ secrets.DEPENDENCY_GUARD_SLACK_WEBHOOK != '' && 'true' || 'false' }}"
          } >> "$GITHUB_ENV"

      - name: Run automated dependency synchronization
        id: auto_sync
        continue-on-error: true
        run: |
          mkdir -p var/auto-sync

          # Build command with options
          CMD="poetry run prometheus orchestrate auto-sync --verbose"

          if [[ "${{ env.DRY_RUN }}" == "true" ]]; then
            CMD="$CMD --dry-run"
          fi

          if [[ "${{ env.NO_ROLLBACK }}" == "true" ]]; then
            CMD="$CMD --no-rollback"
          fi

          if [[ "${{ env.SYNC_PROD }}" == "true" ]]; then
            CMD="$CMD --sync-prod"
          fi

          if [[ "${{ env.NO_AUTO_APPLY }}" == "true" ]]; then
            CMD="$CMD --no-auto-apply"
          fi

          echo "Running: $CMD"
          $CMD | tee var/auto-sync/output.log

          # Capture exit code
          EXIT_CODE="${PIPESTATUS[0]}"
          echo "exit_code=${EXIT_CODE}" >> "$GITHUB_OUTPUT"

          exit ${EXIT_CODE}

      - name: Check for dependency changes
        id: check_changes
        run: |
          if git diff --quiet poetry.lock pyproject.toml; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No dependency changes detected"
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Dependency changes detected"
          fi

      - name: Create pull request with updates
        if: steps.check_changes.outputs.has_changes == 'true' && env.DRY_RUN != 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(deps): automated dependency sync ${{ github.run_id }}"
          title: "chore(deps): Automated dependency synchronization"
          body: |
            ## Automated Dependency Synchronization

            This PR was automatically generated by the dependency auto-sync workflow.

            **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Triggered:** ${{ github.event_name }}
            **Timestamp:** ${{ github.event.head_commit.timestamp }}

            ### Changes Applied

            This PR includes automated dependency updates that passed safety checks:
            - ✅ Guard assessment: passed
            - ✅ Preflight validation: completed
            - ✅ Environment sync: completed

            ### Next Steps

            1. Review the changes in this PR
            2. Verify tests pass in CI
            3. Merge if all checks are green

            ---
            *Generated by prometheus-auto-sync workflow*
          branch: auto-sync/${{ github.run_id }}
          delete-branch: true
          labels: |
            dependencies
            automated

      - name: Upload auto-sync artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auto-sync-${{ github.run_id }}
          path: |
            var/auto-sync/
            var/dependency-preflight/
            var/upgrade-guard/
          if-no-files-found: warn
          retention-days: 30

      - name: Generate summary
        if: always()
        run: |
          EXIT_CODE="${{ steps.auto_sync.outputs.exit_code || '0' }}"

          {
            echo "## Automated Dependency Sync Summary"
            echo ""

            if [[ "${EXIT_CODE}" == "0" ]]; then
              echo "✅ **Status:** Success"
            else
              echo "⚠️  **Status:** Completed with issues"
            fi

            echo ""
            echo "### Configuration"
            echo "- Dry run: ${{ env.DRY_RUN }}"
            echo "- Auto-apply safe: ${{ env.NO_AUTO_APPLY != 'true' }}"
            echo "- Rollback enabled: ${{ env.NO_ROLLBACK != 'true' }}"
            echo "- Sync prod: ${{ env.SYNC_PROD }}"

            echo ""
            echo "### Changes"
            if [[ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]]; then
              echo "✅ Dependency changes detected and committed"
              echo ""
              echo "#### Modified Files"
              git diff --name-only HEAD~1 HEAD || echo "_Changes pending_"
            else
              echo "ℹ️  No dependency changes"
            fi

            echo ""
            echo "### Output"
            if [ -f var/auto-sync/output.log ]; then
              echo "\`\`\`"
              tail -50 var/auto-sync/output.log
              echo "\`\`\`"
            fi

            echo ""
            echo "### State Files"
            if [ -f var/auto-sync-state.json ]; then
              echo "\`\`\`json"
              cat var/auto-sync-state.json | jq '.' || cat var/auto-sync-state.json
              echo "\`\`\`"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Notify Slack on failure
        if: failure() && env.HAS_SLACK_WEBHOOK == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          payload: |
            {
              "text": "⚠️  Automated dependency sync failed for run ${{ github.run_id }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Automated Dependency Sync Failed*\n*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_id }}>\n*Trigger:* ${{ github.event_name }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPENDENCY_GUARD_SLACK_WEBHOOK }}

      - name: Notify Slack on success with changes
        if: success() && steps.check_changes.outputs.has_changes == 'true' && env.HAS_SLACK_WEBHOOK == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          payload: |
            {
              "text": "✅ Automated dependency sync completed with updates",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Automated Dependency Sync Complete*\n*Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_id }}>\n*Status:* Updates applied\n*PR:* Review and merge the auto-generated PR"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPENDENCY_GUARD_SLACK_WEBHOOK }}

      - name: Check exit status
        run: |
          EXIT_CODE="${{ steps.auto_sync.outputs.exit_code || '0' }}"
          if [[ "${EXIT_CODE}" != "0" ]]; then
            echo "::error::Auto-sync completed with exit code ${EXIT_CODE}"
            exit "${EXIT_CODE}"
          fi
