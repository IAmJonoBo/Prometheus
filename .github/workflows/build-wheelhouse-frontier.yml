name: Build Wheelhouse (Frontier-Grade)
# Implements CHIRON_UPGRADE_PLAN recommendations for frontier-grade dependency management

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated)'
        required: false
        default: 'ubuntu-24.04,macos-14,windows-2022'
        type: string
      force_rebuild:
        description: 'Force full rebuild'
        required: false
        default: false
        type: boolean
  release:
    types: [created, published]
  schedule:
    # Weekly build on Mondays at 03:00 UTC
    - cron: '0 3 * * 1'

permissions:
  contents: read
  id-token: write  # For OIDC/Sigstore signing
  packages: write  # For GHCR/OCI artifacts

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.8.3'
  # Hermetic build settings
  PIP_NO_INPUT: '1'
  PIP_REQUIRE_VIRTUALENV: '1'
  PYTHONHASHSEED: '0'  # Deterministic hash seed
  SOURCE_DATE_EPOCH: '0'  # Reproducible timestamps
  # Network isolation settings
  PIP_NO_INDEX: '0'  # Set to 1 for full network isolation
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PYTHONUNBUFFERED: '1'

jobs:
  build-wheels:
    name: Build wheels (${{ matrix.os }} / Python ${{ matrix.python-version }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2022]
        python-version: ['3.11', '3.12']
        include:
          # Test additional architectures on Linux
          - os: ubuntu-24.04
            python-version: '3.11'
            arch: aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python (pinned version)
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          # Use pinned Python version for reproducibility
          check-latest: false
      
      - name: Set up QEMU (for cross-compilation)
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install tooling with pinned versions
        shell: bash
        run: |
          python -m pip install --upgrade pip==24.3.1
          pip install uv==0.5.15 cibuildwheel==2.22.0 build==1.2.2
          
          # Install supply chain tools (optional, will be checked in script)
          pip install cyclonedx-bom==5.3.0 || echo "cyclonedx-bom not available"

      - name: Generate hash-pinned constraints
        shell: bash
        run: |
          echo "Generating hash-pinned constraints..."
          uv pip compile pyproject.toml -o constraints-${{ matrix.os }}.txt --generate-hashes
          
          # Upload for later use
          mkdir -p artifacts
          cp constraints-${{ matrix.os }}.txt artifacts/

      - name: Build platform wheels with cibuildwheel
        shell: bash
        env:
          CIBW_BUILD: "cp311-* cp312-*"
          CIBW_SKIP: "pp* *_i686 *-musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux_2_28_x86_64:2024.12.17-0"
          CIBW_MANYLINUX_AARCH64_IMAGE: "quay.io/pypa/manylinux_2_28_aarch64:2024.12.17-0"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_COMMAND: "python -c 'import prometheus; print(prometheus.__version__ if hasattr(prometheus, \"__version__\") else \"ok\")'"
          # Use auditwheel/delocate for native lib vendoring
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
        run: |
          mkdir -p wheelhouse
          python -m cibuildwheel --output-dir wheelhouse
          
          echo "Built $(find wheelhouse -name '*.whl' | wc -l) wheels"
          ls -lh wheelhouse/*.whl

      - name: Upload platform wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            wheelhouse/*.whl
            artifacts/constraints-${{ matrix.os }}.txt
          retention-days: 7

  create-wheelhouse-bundle:
    name: Create comprehensive wheelhouse bundle
    needs: build-wheels
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          poetry install --no-root --only main

      - name: Install supply chain tools
        run: |
          pip install uv cyclonedx-bom
          
          # Install osv-scanner
          curl -L -o osv-scanner https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64
          chmod +x osv-scanner
          sudo mv osv-scanner /usr/local/bin/
          
          # Install cosign
          curl -L -o cosign https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v5
        with:
          path: collected-wheels

      - name: Consolidate wheels
        run: |
          mkdir -p vendor/wheelhouse
          find collected-wheels -name "*.whl" -exec cp {} vendor/wheelhouse/ \;
          echo "Total wheels: $(find vendor/wheelhouse -name '*.whl' | wc -l)"

      - name: Build full dependency wheelhouse
        env:
          EXTRAS: "pii,observability,rag,llm,governance,integrations"
          GENERATE_SUPPLY_CHAIN: "true"
          CREATE_BUNDLE: "true"
          COMMIT_SHA: ${{ github.sha }}
          GIT_REF: ${{ github.ref_name }}
        run: |
          bash scripts/build-wheelhouse.sh vendor/wheelhouse

      - name: Generate SBOM
        run: |
          cyclonedx-py --format json -o vendor/wheelhouse/sbom.json .
          echo "SBOM generated: vendor/wheelhouse/sbom.json"

      - name: Run vulnerability scan
        continue-on-error: true  # Don't fail on vulnerabilities, just report
        run: |
          osv-scanner --lockfile=vendor/wheelhouse/requirements.txt --format json > vendor/wheelhouse/osv.json || true
          
          # Check for critical vulnerabilities
          if [ -f vendor/wheelhouse/osv.json ]; then
            python - <<'PY'
import json
import sys
from pathlib import Path

osv_file = Path("vendor/wheelhouse/osv.json")
if osv_file.exists():
    data = json.loads(osv_file.read_text())
    results = data.get("results", [])
    total_vulns = sum(len(r.get("packages", [{}])[0].get("vulnerabilities", [])) for r in results)
    print(f"Total vulnerabilities found: {total_vulns}")
    
    # Set output for summary
    with open(os.environ.get("GITHUB_STEP_SUMMARY", "/dev/null"), "a") as f:
        f.write(f"## Vulnerability Scan\n\nFound {total_vulns} vulnerabilities\n")
else:
    print("No vulnerabilities found")
PY
          fi

      - name: Create portable bundle
        run: |
          python - <<'PY'
import sys
from pathlib import Path
sys.path.insert(0, str(Path.cwd()))
from chiron.deps.bundler import create_wheelhouse_bundle

metadata = create_wheelhouse_bundle(
    wheelhouse_dir=Path("vendor/wheelhouse"),
    output_path=Path("wheelhouse-bundle.tar.gz"),
    commit_sha="${{ github.sha }}",
    git_ref="${{ github.ref_name }}",
)
print(f"Bundle: {metadata.wheel_count} wheels, {metadata.total_size_bytes:,} bytes")
PY

      - name: Sign bundle with cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign-blob --yes wheelhouse-bundle.tar.gz > wheelhouse-bundle.tar.gz.sig
          echo "Signed wheelhouse bundle"

      - name: Generate attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: 'wheelhouse-bundle.tar.gz'

      - name: Upload wheelhouse bundle
        uses: actions/upload-artifact@v4
        with:
          name: wheelhouse-bundle
          path: |
            wheelhouse-bundle.tar.gz
            wheelhouse-bundle.tar.gz.sha256
            wheelhouse-bundle.tar.gz.sig
            vendor/wheelhouse/sbom.json
            vendor/wheelhouse/osv.json
            vendor/wheelhouse/bundle-metadata.json
          retention-days: 30

      - name: Generate summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ## Wheelhouse Build Complete
          
          - **Commit**: ${{ github.sha }}
          - **Ref**: ${{ github.ref_name }}
          - **Wheels**: $(find vendor/wheelhouse -name '*.whl' | wc -l)
          - **Bundle**: wheelhouse-bundle.tar.gz
          - **SBOM**: ✓ Generated
          - **Vulnerability Scan**: ✓ Completed
          - **Signature**: ✓ Signed with cosign
          - **Provenance**: ✓ SLSA attestation
          
          ### Usage
          
          **Air-gapped installation:**
          \`\`\`bash
          # Download and verify
          cosign verify-blob --signature wheelhouse-bundle.tar.gz.sig wheelhouse-bundle.tar.gz
          
          # Extract
          tar -xzf wheelhouse-bundle.tar.gz
          
          # Install
          pip install --no-index --find-links=wheelhouse -r wheelhouse/requirements.txt
          \`\`\`
          EOF

  # Compatibility matrix testing
  compatibility-test:
    name: Test compatibility (${{ matrix.os }} / Python ${{ matrix.python-version }})
    needs: create-wheelhouse-bundle
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, macos-14, macos-13, windows-2022]
        python-version: ['3.11', '3.12']
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download wheelhouse bundle
        uses: actions/download-artifact@v5
        with:
          name: wheelhouse-bundle
      
      - name: Extract wheelhouse bundle
        shell: bash
        run: |
          tar -xzf wheelhouse-bundle.tar.gz
          echo "Extracted $(find wheelhouse -name '*.whl' | wc -l) wheels"
      
      - name: Test offline installation
        shell: bash
        run: |
          # Try installing from wheelhouse without network access
          python -m pip install --no-index --find-links=wheelhouse pip setuptools wheel
          
          # Test installing main package dependencies
          if [ -f wheelhouse/requirements.txt ]; then
            python -m pip install --no-index --find-links=wheelhouse -r wheelhouse/requirements.txt || true
          fi
          
          echo "✓ Installation test passed"
      
      - name: Test import
        shell: bash
        run: |
          python -c "import sys; print(f'Python {sys.version}')"
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          echo "✓ Import test passed"
      
      - name: Report compatibility
        shell: bash
        run: |
          echo "## Compatibility Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Python**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✓ Passed" >> $GITHUB_STEP_SUMMARY

  # Optional: Policy enforcement gate
  policy-check:
    name: Policy enforcement check
    needs: create-wheelhouse-bundle
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download wheelhouse bundle
        uses: actions/download-artifact@v5
        with:
          name: wheelhouse-bundle

      - name: Check OSV results against policy
        run: |
          python - <<'PY'
import json
import sys
from pathlib import Path

# Load OSV results
osv_file = Path("osv.json")
if not osv_file.exists():
    print("No OSV results found, skipping")
    sys.exit(0)

data = json.loads(osv_file.read_text())
results = data.get("results", [])

# Count by severity (simplified check)
critical_count = 0
high_count = 0

for result in results:
    for pkg in result.get("packages", []):
        for vuln in pkg.get("vulnerabilities", []):
            severity = str(vuln.get("severity", "")).lower()
            if "critical" in severity:
                critical_count += 1
            elif "high" in severity:
                high_count += 1

print(f"Critical: {critical_count}, High: {high_count}")

# Policy gate: fail on critical vulnerabilities
if critical_count > 0:
    print(f"POLICY VIOLATION: {critical_count} critical vulnerabilities found")
    sys.exit(1)

print("Policy check passed")
PY
