name: Weekly Dependency Check
on:
  schedule:
    # Run dependency check weekly on Mondays at 9:00 UTC
    - cron: 0 9 * * 1
  workflow_dispatch:
permissions:
  contents: read
jobs:
  dependency-check:
    name: Check for dependency updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.2.1
      - name: Check for outdated dependencies
        continue-on-error: true
        run: |
          poetry show --outdated --format json > dependency-report.json || {
            echo "::warning::Could not generate dependency report"
            echo "[]" > dependency-report.json
          }
      - name: Generate dependency summary
        run: |
          python - <<'EOF'
          import json
          import os
          from pathlib import Path

          report_path = Path('dependency-report.json')

          if not report_path.exists():
              print("No dependency report found")
              exit(0)

          try:
              data = json.loads(report_path.read_text())
          except:
              print("Failed to parse dependency report")
              exit(0)

          if not data:
              summary = "### âœ“ All dependencies are up to date\n"
          else:
              summary = f"### ðŸ“¦ Dependency Updates Available ({len(data)})\n\n"
              for dep in data[:15]:  # Show first 15
                  name = dep.get('name', 'unknown')
                  current = dep.get('version', 'unknown')
                  latest = dep.get('latest', 'unknown')
                  summary += f"- **{name}**: {current} â†’ {latest}\n"

              if len(data) > 15:
                  summary += f"\n...and {len(data) - 15} more updates available\n"

              summary += "\nðŸ’¡ Run `poetry update` to update dependencies\n"

          summary_file = Path(os.environ.get('GITHUB_STEP_SUMMARY', '/dev/null'))
          if summary_file.exists() or summary_file.parent.exists():
              summary_file.write_text(summary)

          print(summary)
          EOF

      - name: Upload dependency report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-report.json
          retention-days: 7
          if-no-files-found: ignore
