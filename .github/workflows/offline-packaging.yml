name: Offline Packaging

permissions:
  contents: read
  actions: write

on:
  schedule:
    - cron: "0 3 * * 1" # Mondays at 03:00 UTC
  workflow_dispatch:

env:
  POETRY_HOME: ~/.poetry

jobs:
  build-wheels:
    name: Build project wheels (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Ensure Git LFS tooling
        shell: bash
        run: |
          set -euo pipefail
          git lfs version
          git lfs install --local >/dev/null 2>&1 || git lfs install >/dev/null 2>&1

      - name: Reset workspace before checkout
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os
          import shutil
          import stat
          import subprocess
          from pathlib import Path

          root = Path(os.environ["GITHUB_WORKSPACE"])
          skip = {"_temp"}
          git_dir = root / ".git"

          def handle_remove_readonly(func, path, exc):
              _, excvalue, _ = exc
              if isinstance(excvalue, PermissionError):
                  os.chmod(path, stat.S_IWRITE)
                  func(path)
              else:
                  raise excvalue

          if git_dir.exists():
              subprocess.run(
                  ["git", "reset", "--hard"],
                  cwd=root,
                  check=False,
                  stdout=subprocess.DEVNULL,
                  stderr=subprocess.DEVNULL,
              )
              subprocess.run(
                  ["git", "clean", "-ffdx"],
                  cwd=root,
                  check=False,
                  stdout=subprocess.DEVNULL,
                  stderr=subprocess.DEVNULL,
              )
          else:
              for child in root.iterdir():
                  if child.name in skip:
                      continue
                  if child.is_dir():
                      shutil.rmtree(child, onerror=handle_remove_readonly)
                  else:
                      try:
                          child.unlink()
                      except FileNotFoundError:
                          continue
              subprocess.run(["git", "init"], cwd=root, check=True)
          PY

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          clean: true
          fetch-depth: 0
          lfs: false

      - name: Check for missing Git LFS objects
        shell: bash
        run: |
          set -euo pipefail
          if ! git remote get-url origin >/dev/null 2>&1; then
              echo "::warning::Skipping LFS remote verification because no origin remote is configured."
              exit 0
          fi
          ref="${GITHUB_REF_NAME:-HEAD}"
          if ! output=$(git lfs fetch --all --dry-run 2>&1); then
              if printf '%s' "$output" | grep -qi 'does not exist on the server'; then
                  echo "::error::Detected Git LFS objects that are absent on origin."\
                      " Run 'git lfs push --all origin ${GITHUB_REF_NAME:-main}' from a machine that has the artifacts, then retry."
                  printf '%s\n' "$output"
                  exit 1
              fi
              echo "::warning::git lfs fetch --dry-run encountered an error; continuing"
              printf '%s\n' "$output"
          else
              printf 'Verified git LFS accessibility for ref %s\n' "$ref"
          fi

      - name: Fetch Git LFS content with monitor
        shell: bash
        run: |
          set -euo pipefail
          export GIT_LFS_SKIP_SMUDGE=1
          export GIT_LFS_PROGRESS=1
          python - <<'PY'
          import shutil
          import subprocess
          import sys
          import time

          HEARTBEAT_SECONDS = 60
          DEADLINE_SECONDS = 1800

          def monitor(cmd: list[str]) -> None:
              start = time.monotonic()
              proc = subprocess.Popen(
                  cmd,
                  stdout=subprocess.PIPE,
                  stderr=subprocess.STDOUT,
                  text=True,
                  bufsize=1,
              )
              last_emit = start
              try:
                  while True:
                      line = proc.stdout.readline()
                      if line:
                          sys.stdout.write(line)
                          sys.stdout.flush()
                          last_emit = time.monotonic()
                          continue
                      if proc.poll() is not None:
                          break
                      now = time.monotonic()
                      if now - start > DEADLINE_SECONDS:
                          proc.kill()
                          raise TimeoutError(
                              f"{' '.join(cmd)} exceeded {DEADLINE_SECONDS // 60} minute limit"
                          )
                      if now - last_emit >= HEARTBEAT_SECONDS:
                          elapsed = int(now - start)
                          cmd_display = shutil.which(cmd[0]) or cmd[0]
                          sys.stdout.write(
                              f"::notice::{cmd_display} {' '.join(cmd[1:])} still running "
                              f"after {elapsed} seconds\n"
                          )
                          sys.stdout.flush()
                          last_emit = now
                      time.sleep(2)
                  return_code = proc.wait()
                  if return_code:
                      raise subprocess.CalledProcessError(return_code, cmd)
              finally:
                  if proc.poll() is None:
                      proc.kill()

          monitor(["git", "lfs", "fetch", "--all", "--verbose"])
          monitor(["git", "lfs", "checkout"])
          PY

      - name: Remove untracked files
        shell: bash
        run: git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Build wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel
          python - <<'PY'
          from pathlib import Path
          import shutil

          wheelhouse = Path('wheelhouse')
          wheelhouse.mkdir(exist_ok=True)
          for wheel in Path('dist').glob('*.whl'):
              shutil.copy2(wheel, wheelhouse / wheel.name)
          PY

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  dependency-suite:
    name: Dependency audit & wheelhouse
    needs: build-wheels
    runs-on: ubuntu-latest
    env:
      EXTRAS: pii,observability,rag,llm,governance,integrations
      POETRY_NO_INTERACTION: "1"
    steps:
      - name: Ensure Git LFS tooling
        shell: bash
        run: |
          set -euo pipefail
          git lfs version
          git lfs install --local >/dev/null 2>&1 || git lfs install >/dev/null 2>&1

      - name: Reset workspace before checkout
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os
          import shutil
          import stat
          import subprocess
          from pathlib import Path

          root = Path(os.environ["GITHUB_WORKSPACE"])
          skip = {"_temp"}
          git_dir = root / ".git"

          def handle_remove_readonly(func, path, exc):
              _, excvalue, _ = exc
              if isinstance(excvalue, PermissionError):
                  os.chmod(path, stat.S_IWRITE)
                  func(path)
              else:
                  raise excvalue

          if git_dir.exists():
              subprocess.run(
                  ["git", "reset", "--hard"],
                  cwd=root,
                  check=False,
                  stdout=subprocess.DEVNULL,
                  stderr=subprocess.DEVNULL,
              )
              subprocess.run(
                  ["git", "clean", "-ffdx"],
                  cwd=root,
                  check=False,
                  stdout=subprocess.DEVNULL,
                  stderr=subprocess.DEVNULL,
              )
          else:
              for child in root.iterdir():
                  if child.name in skip:
                      continue
                  if child.is_dir():
                      shutil.rmtree(child, onerror=handle_remove_readonly)
                  else:
                      try:
                          child.unlink()
                      except FileNotFoundError:
                          continue
              subprocess.run(["git", "init"], cwd=root, check=True)
          PY

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          clean: true
          fetch-depth: 0
          lfs: false

      - name: Check for missing Git LFS objects
        shell: bash
        run: |
          set -euo pipefail
          if ! git remote get-url origin >/dev/null 2>&1; then
              echo "::warning::Skipping LFS remote verification because no origin remote is configured."
              exit 0
          fi
          ref="${GITHUB_REF_NAME:-HEAD}"
          if ! output=$(git lfs fetch --all --dry-run 2>&1); then
              if printf '%s' "$output" | grep -qi 'does not exist on the server'; then
                  echo "::error::Detected Git LFS objects that are absent on origin."\
                      " Run 'git lfs push --all origin ${GITHUB_REF_NAME:-main}' from a machine that has the artifacts, then retry."
                  printf '%s\n' "$output"
                  exit 1
              fi
              echo "::warning::git lfs fetch --dry-run encountered an error; continuing"
              printf '%s\n' "$output"
          else
              printf 'Verified git LFS accessibility for ref %s\n' "$ref"
          fi

      - name: Fetch Git LFS content with monitor
        shell: bash
        run: |
          set -euo pipefail
          export GIT_LFS_SKIP_SMUDGE=1
          export GIT_LFS_PROGRESS=1
          python - <<'PY'
          import shutil
          import subprocess
          import sys
          import time

          HEARTBEAT_SECONDS = 60
          DEADLINE_SECONDS = 1800

          def monitor(cmd: list[str]) -> None:
              start = time.monotonic()
              proc = subprocess.Popen(
                  cmd,
                  stdout=subprocess.PIPE,
                  stderr=subprocess.STDOUT,
                  text=True,
                  bufsize=1,
              )
              last_emit = start
              try:
                  while True:
                      line = proc.stdout.readline()
                      if line:
                          sys.stdout.write(line)
                          sys.stdout.flush()
                          last_emit = time.monotonic()
                          continue
                      if proc.poll() is not None:
                          break
                      now = time.monotonic()
                      if now - start > DEADLINE_SECONDS:
                          proc.kill()
                          raise TimeoutError(
                              f"{' '.join(cmd)} exceeded {DEADLINE_SECONDS // 60} minute limit"
                          )
                      if now - last_emit >= HEARTBEAT_SECONDS:
                          elapsed = int(now - start)
                          cmd_display = shutil.which(cmd[0]) or cmd[0]
                          sys.stdout.write(
                              f"::notice::{cmd_display} {' '.join(cmd[1:])} still running "
                              f"after {elapsed} seconds\n"
                          )
                          sys.stdout.flush()
                          last_emit = now
                      time.sleep(2)
                  return_code = proc.wait()
                  if return_code:
                      raise subprocess.CalledProcessError(return_code, cmd)
              finally:
                  if proc.poll() is None:
                      proc.kill()

          monitor(["git", "lfs", "fetch", "--all", "--verbose"])
          monitor(["git", "lfs", "checkout"])
          PY

      - name: Remove untracked files
        shell: bash
        run: git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.2.0

      - name: Validate pyproject metadata
        run: |
          poetry --version
          poetry lock
          poetry check

      - name: Install project extras
        run: |
          poetry install --with ${EXTRAS} --no-root --sync

      - name: Generate dependency report
        run: |
          poetry show --outdated --format json > dependency-report.json

      - name: Run offline packaging orchestrator
        run: |
          poetry run python scripts/offline_package.py --skip-phase git

      - name: Download project wheels from platform builds
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: vendor/wheelhouse/platform
          merge-multiple: false

      - name: Verify downloaded project wheels
        shell: bash
        run: |
          set -euo pipefail
          if ! find vendor/wheelhouse/platform -type f -name "*.whl" -print -quit >/dev/null 2>&1; then
              echo "::error::No project wheels were downloaded from platform builds."
              exit 1
          fi
          printf 'Project wheels included in wheelhouse:\n'
          find vendor/wheelhouse/platform -type f -name "*.whl" -print | sed 's/^/  - /'

      - name: Archive wheelhouse
        run: |
          tar -czf wheelhouse.tar.gz -C vendor wheelhouse
          sha256sum wheelhouse.tar.gz > wheelhouse.tar.gz.sha256

      - name: Archive models
        run: |
          if [ -d vendor/models ]; then
            tar -czf models.tar.gz -C vendor models
            sha256sum models.tar.gz > models.tar.gz.sha256
          else
            echo "No vendor/models directory present; skipping archive."
          fi

      - name: Archive container images
        run: |
          if [ -d vendor/images ]; then
            tar -czf images.tar.gz -C vendor images
            sha256sum images.tar.gz > images.tar.gz.sha256
          else
            echo "No vendor/images directory present; skipping archive."
          fi

      - name: Summarise dependency state
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          report_path = Path('dependency-report.json')
          summary_path = Path('vendor/packaging-run.json')

          header = []
          if report_path.exists():
              data = json.loads(report_path.read_text())
              updates = data.get('dependencies', [])
              header.append(f"### Poetry dependency updates ({len(updates)})\n")
              for dep in updates[:10]:
                  header.append(f"- {dep['name']} {dep['version']} → {dep['latest']}")
              if len(updates) > 10:
                  header.append(f"- …and {len(updates) - 10} more")
              header.append("")

          if summary_path.exists():
              summary = json.loads(summary_path.read_text())
              dep_summary = summary.get('dependency_summary', {})
              counts = dep_summary.get('counts', {})
              header.append("### Offline packaging summary")
              header.append(
                  f"- Updates detected: major={counts.get('major', 0)} minor={counts.get('minor', 0)}"
              )
              header.append(
                  f"- Wheelhouse status: {summary.get('wheelhouse_audit', {}).get('status', 'unknown')}"
              )
              next_actions = dep_summary.get('next_actions') or []
              if next_actions:
                  header.append("- Next actions:")
                  for action in next_actions[:5]:
                      header.append(f"  - {action}")

          if header:
              Path(os.environ['GITHUB_STEP_SUMMARY']).write_text("\n".join(header) + "\n")
          PY

      - name: Upload dependency artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: offline-packaging-suite
          if-no-files-found: warn
          path: |
            dependency-report.json
            vendor/wheelhouse/**
            vendor/models/manifest.json
            vendor/images/manifest.json
            vendor/packaging-run.json
            vendor/CHECKSUMS.sha256
            wheelhouse.tar.gz
            wheelhouse.tar.gz.sha256
            models.tar.gz
            models.tar.gz.sha256
            images.tar.gz
            images.tar.gz.sha256

      - name: Prune older offline-packaging artefacts
        if: always() && github.event_name != 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ github.token }}
          script: |
            const artifactName = "offline-packaging-suite";
            const maxArtifacts = 3;
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            const candidates = artifacts.data.artifacts
              .filter((artifact) => artifact.name === artifactName && !artifact.expired)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const toDelete = candidates.slice(maxArtifacts);
            if (toDelete.length === 0) {
              core.info(`No ${artifactName} artefacts require pruning.`);
            }
            for (const artifact of toDelete) {
              core.info(`Deleting outdated artifact ${artifact.id} (${artifact.created_at})`);
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              } catch (error) {
                core.warning(
                  `Failed to delete artifact ${artifact.id}: ${error?.message ?? error}`,
                );
              }
            }
