name: Offline Packaging

permissions:
  contents: read
  actions: write

on:
  schedule:
    - cron: "0 3 * * 1" # Mondays at 03:00 UTC
  workflow_dispatch:

env:
  POETRY_HOME: ~/.poetry

jobs:
  build-wheels:
    name: Build project wheels (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      GIT_LFS_SKIP_SMUDGE: "1"
    steps:
      - name: Reset workspace before checkout
        shell: bash
        run: |
          if [ -d "${{ github.workspace }}" ]; then
            find "${{ github.workspace }}" -mindepth 1 -maxdepth 1 -exec rm -rf {} +
          fi

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          clean: true
          fetch-depth: 0

      - name: Hydrate Git LFS assets
        shell: bash
        run: |
          git lfs install --local
          git lfs fetch --all || true
          git lfs checkout || git lfs pull || true

      - name: Verify LFS hydration
        shell: bash
        run: bash scripts/ci/verify-lfs.sh

      - name: Remove untracked files
        shell: bash
        run: git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Build wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip build
          python -m build --wheel
          python - <<'PY'
          from pathlib import Path
          import shutil

          wheelhouse = Path('wheelhouse')
          wheelhouse.mkdir(exist_ok=True)
          for wheel in Path('dist').glob('*.whl'):
              shutil.copy2(wheel, wheelhouse / wheel.name)
          PY

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  dependency-suite:
    name: Dependency audit & wheelhouse
    needs: build-wheels
    runs-on: ubuntu-latest
    env:
      EXTRAS: pii,observability,rag,llm,governance,integrations
      POETRY_NO_INTERACTION: "1"
      ARTIFACT_CLEANUP_TOKEN: ${{ secrets.ARTIFACT_CLEANUP_TOKEN }}
      GIT_LFS_SKIP_SMUDGE: "1"
    steps:
      - name: Reset workspace before checkout
        shell: bash
        run: |
          if [ -d "${{ github.workspace }}" ]; then
            find "${{ github.workspace }}" -mindepth 1 -maxdepth 1 -exec rm -rf {} +
          fi

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          clean: true
          fetch-depth: 0

      - name: Hydrate Git LFS assets
        shell: bash
        run: |
          git lfs install --local
          git lfs fetch --all || true
          git lfs checkout || git lfs pull || true

      - name: Verify LFS hydration
        shell: bash
        run: bash scripts/ci/verify-lfs.sh

      - name: Remove untracked files
        shell: bash
        run: git clean -fdx

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: 3.11

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==2.2.0

      - name: Validate pyproject metadata
        run: |
          poetry --version
          poetry lock
          poetry check

      - name: Install project extras
        run: |
          poetry install --with ${EXTRAS} --no-root --sync

      - name: Generate dependency report
        run: |
          poetry show --outdated --format json > dependency-report.json

      - name: Run offline packaging orchestrator
        run: |
          poetry run python scripts/offline_package.py --skip-phase git

      - name: Archive wheelhouse
        run: |
          tar -czf wheelhouse.tar.gz -C vendor wheelhouse
          sha256sum wheelhouse.tar.gz > wheelhouse.tar.gz.sha256

      - name: Summarise dependency state
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          report_path = Path('dependency-report.json')
          summary_path = Path('vendor/packaging-run.json')

          header = []
          if report_path.exists():
              data = json.loads(report_path.read_text())
              updates = data.get('dependencies', [])
              header.append(f"### Poetry dependency updates ({len(updates)})\n")
              for dep in updates[:10]:
                  header.append(f"- {dep['name']} {dep['version']} → {dep['latest']}")
              if len(updates) > 10:
                  header.append(f"- …and {len(updates) - 10} more")
              header.append("")

          if summary_path.exists():
              summary = json.loads(summary_path.read_text())
              dep_summary = summary.get('dependency_summary', {})
              counts = dep_summary.get('counts', {})
              header.append("### Offline packaging summary")
              header.append(
                  f"- Updates detected: major={counts.get('major', 0)} minor={counts.get('minor', 0)}"
              )
              header.append(
                  f"- Wheelhouse status: {summary.get('wheelhouse_audit', {}).get('status', 'unknown')}"
              )
              next_actions = dep_summary.get('next_actions') or []
              if next_actions:
                  header.append("- Next actions:")
                  for action in next_actions[:5]:
                      header.append(f"  - {action}")

          if header:
              Path(os.environ['GITHUB_STEP_SUMMARY']).write_text("\n".join(header) + "\n")
          PY

      - name: Upload dependency artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: offline-packaging-suite
          path: |
            dependency-report.json
            vendor/wheelhouse/**
            vendor/models/manifest.json
            vendor/images/manifest.json
            vendor/packaging-run.json
            vendor/CHECKSUMS.sha256
            wheelhouse.tar.gz
            wheelhouse.tar.gz.sha256

      - name: Prune older offline-packaging artefacts
        if: always() && github.event_name != 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ github.token }}
          script: |
            const artifactName = "offline-packaging-suite";
            const maxArtifacts = 3;
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
            });
            const candidates = artifacts.data.artifacts
              .filter((artifact) => artifact.name === artifactName && !artifact.expired)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const toDelete = candidates.slice(maxArtifacts);
            if (toDelete.length === 0) {
              core.info(`No ${artifactName} artefacts require pruning.`);
            }
            for (const artifact of toDelete) {
              core.info(`Deleting outdated artifact ${artifact.id} (${artifact.created_at})`);
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              } catch (error) {
                core.warning(
                  `Failed to delete artifact ${artifact.id}: ${error?.message ?? error}`,
                );
              }
            }
