name: Pipeline Dry-Run

on:
  push:
    branches: [main]
    paths:
      - "prometheus/**"
      - "common/**"
      - "configs/**"
      - "var/dryrun-fixtures/**"
      - ".github/workflows/pipeline-dry-run.yml"
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"
  DRYRUN_CONFIG: "configs/defaults/pipeline_dryrun.toml"

jobs:
  dry-run:
    name: Dry-run shard ${{ matrix.shard }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - shard: baseline
            query: "Summarise dry-run fixtures"
            actor: "ci-baseline"
          - shard: ingestion-scan
            query: "Compile ingestion anomalies for quarterly review"
            actor: "ci-ingestion"
          - shard: policy-audit
            query: "Audit policy controls referenced in fixtures"
            actor: "ci-policy"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade wheel
          pip install .

      - name: Reset dry-run artefact root
        run: |
          rm -rf var/dryrun/runs
          mkdir -p var/dryrun/runs

      - name: Execute dry-run pipeline
        id: run_dry
        continue-on-error: true
        env:
          DRYRUN_QUERY: ${{ matrix.query }}
          DRYRUN_ACTOR: ${{ matrix.actor }}
        run: |
          set +e
          python -m prometheus.cli pipeline-dry-run \
            --config "${DRYRUN_CONFIG}" \
            --query "${DRYRUN_QUERY}" \
            --actor "${DRYRUN_ACTOR}"
          status=$?
          echo "exit_code=${status}" >> "${GITHUB_OUTPUT}"
          exit ${status}

      - name: Record pipeline status
        run: |
          echo "DRYRUN_STATUS=${{ steps.run_dry.outcome }}" >> "${GITHUB_ENV}"
          exit_code="${{ steps.run_dry.outputs.exit_code }}"
          if [ -z "${exit_code}" ]; then
            exit_code=0
          fi
          echo "DRYRUN_EXIT_CODE=${exit_code}" >> "${GITHUB_ENV}"

      - name: Detect artefacts
        id: detect
        run: |
          python - <<'PY'
          import os
          import pathlib
          import sys

          output = pathlib.Path(os.environ["GITHUB_OUTPUT"])
          root = pathlib.Path("var/dryrun/runs").resolve()
          if not root.exists():
              print("::error::Dry-run artefact root missing", file=sys.stderr)
              sys.exit(1)
          candidates = [path for path in root.iterdir() if path.is_dir()]
          if not candidates:
              print("::error::Dry-run produced no artefacts", file=sys.stderr)
              sys.exit(1)
          latest = max(candidates, key=lambda path: path.stat().st_mtime)
          with output.open("a", encoding="utf-8") as handle:
              handle.write(f"run_dir={latest}\n")
          PY

      - name: Summarise artefacts
        env:
          RUN_DIR: ${{ steps.detect.outputs.run_dir }}
          SHARD: ${{ matrix.shard }}
        run: |
          python - <<'PY'
          import json
          import os
          import pathlib

          run_dir = pathlib.Path(os.environ["RUN_DIR"])
          manifest = json.loads(
              (run_dir / "manifest.json").read_text(encoding="utf-8")
          )
          summary = {
              "shard": os.environ["SHARD"],
              "run_id": manifest.get("run_id"),
              "query": manifest.get("query"),
              "actor": manifest.get("actor"),
              "completed_at": manifest.get("completed_at"),
              "warnings": manifest.get("warnings", []),
              "resource_usage": manifest.get("resource_usage", {}),
              "artifact_root": str(run_dir),
              "manifest": str(run_dir / "manifest.json"),
              "events": str(run_dir / "events.json"),
              "metrics": str(run_dir / "metrics.json"),
              "status": os.environ.get("DRYRUN_STATUS", "success"),
          }
          lineage_path = run_dir / "governance/lineage.json"
          if lineage_path.exists():
              summary["lineage"] = str(lineage_path)
          summary_path = pathlib.Path(
              f"dryrun-summary-{os.environ['SHARD']}.json"
          )
          summary_path.write_text(
              json.dumps(summary, indent=2), encoding="utf-8"
          )

          step_summary = pathlib.Path(os.environ["GITHUB_STEP_SUMMARY"])
          with step_summary.open("a", encoding="utf-8") as handle:
              handle.write(
                  f"### Dry-run artefacts for `{summary['shard']}`\n\n"
              )
              handle.write(f"* Run ID: `{summary['run_id']}`\n")
              handle.write(f"* Query: {summary['query']}\n")
              handle.write(f"* Actor: `{summary['actor']}`\n")
              handle.write(f"* Root: `{summary['artifact_root']}`\n")
              handle.write(f"* Metrics: `{summary['metrics']}`\n")
              handle.write(f"* Events: `{summary['events']}`\n")
              warnings = summary.get("warnings") or []
              if warnings:
                  handle.write("* Warnings:\n")
                  for warning in warnings:
                      handle.write(f"  * {warning}\n")
              else:
                  handle.write("* Warnings: none\n")
              usage = summary.get("resource_usage") or {}
              if usage:
                  handle.write("* Resource usage:\n")
                  for key, value in usage.items():
                      handle.write(f"  * {key}: {value}\n")
              handle.write("\n")
          PY

      - name: Process governance hooks
        id: governance
        run: |
          python scripts/process_dryrun_governance.py \
            --summary "dryrun-summary-${{ matrix.shard }}.json" \
            --ci-event "dryrun-governance-${{ matrix.shard }}.json" \
            --issue "dryrun-issue-${{ matrix.shard }}.md"

      - name: Create governance issue
        if: steps.governance.outputs.issue_required == 'true'
        uses: peter-evans/create-issue-from-file@v6
        with:
          title: Dry-run governance alert (${{ matrix.shard }})
          content-filepath: dryrun-issue-${{ matrix.shard }}.md
          labels: governance,dry-run

      - name: Enforce governance severity
        if: steps.governance.outputs.fail_job == 'true'
        run: |
          echo "Governance thresholds require failure" >&2
          exit 1

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: dryrun-${{ matrix.shard }}-${{ github.run_id }}
          path: |
            ${{ steps.detect.outputs.run_dir }}
            dryrun-summary-${{ matrix.shard }}.json
            dryrun-governance-${{ matrix.shard }}.json
            dryrun-issue-${{ matrix.shard }}.md
          if-no-files-found: error
          retention-days: 7
